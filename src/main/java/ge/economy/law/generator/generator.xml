<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration>
    <!-- Configure the database connection here -->
    <jdbc>
        <driver>org.postgresql.Driver</driver>
        <url>jdbc:postgresql://10.20.21.85:5432/lawyers</url>
        <user>nlomineishvili</user>
        <password>2wsx@WSX</password>

        <!--     You can also pass user/password and other JDBC properties in the optional properties tag:
            <properties>
              <property><key>user</key><value>[db-user]</value></property>
              <property><key>password</key><value>[db-password]</value></property>
            </properties>-->
    </jdbc>

    <generator>
        <database>
            <!-- First, register your custom types here -->
            <customTypes>
                <customType>
                    <!-- Specify the name of your custom type. Avoid using names from org.jooq.impl.SQLDataType -->
                    <name>TimestampDate</name>

                    <!-- Specify the Java type of your custom type. This corresponds to the Converter's <U> type. -->
                    <type>java.util.Date</type>

                    <!-- Associate that custom type with your converter. -->
                    <converter>ge.economy.law.utils.TimestampConverter</converter>
                </customType>
            </customTypes>

            <!-- Then, associate custom types with database columns -->
            <forcedTypes>

                <forcedType>
                    <name>TimestampDate</name>
                    <types>timestamp.*</types>
                </forcedType>

            </forcedTypes>
            <!-- The database dialect from jooq-meta. Available dialects are
                 named org.util.[database].[database]Database. Known values are:

                 org.jooq.util.ase.ASEDatabase (to be used with Sybase ASE)
                 org.jooq.util.cubrid.CUBRIDDatabase
                 org.jooq.util.db2.DB2Database
                 org.jooq.util.derby.DerbyDatabase
                 org.jooq.util.h2.H2Database
                 org.jooq.util.hsqldb.HSQLDBDatabase
                 org.jooq.util.ingres.IngresDatabase
                 org.jooq.util.mysql.MySQLDatabase
                 org.jooq.util.oracle.OracleDatabase
                 org.jooq.util.postgres.PostgresDatabase
                 org.jooq.util.sqlite.SQLiteDatabase
                 org.jooq.util.sqlserver.SQLServerDatabase
                 org.jooq.util.sybase.SybaseDatabase (to be used with Sybase SQL Anywhere)

                 You can also provide your own org.jooq.util.Database implementation
                 here, if your database is currently not supported or if you wish to
                 read the database schema from a file, such as a Hibernate .hbm.xml file -->
            <name>org.jooq.util.postgres.PostgresDatabase</name>

            <!-- All elements that are generated from your schema (several Java
                 regular expressions, separated by comma) Watch out for
                 case-sensitivity. Depending on your database, this might be
                 important! You can create case-insensitive regular expressions
                 using this syntax: (?i:expr)A comma-separated list of regular
                 expressions -->
            <includes>.*</includes>

            <!-- All elements that are excluded from your schema (several Java
                 regular expressions, separated by comma). Excludes match before
                 includes -->
            <excludes></excludes>

            <!-- The schema that is used locally as a source for meta information.
                 This could be your development schema or the production schema, etc
                 This cannot be combined with the schemata element.

                 If left empty, jOOQ will generate all available schemata. See the
                 manual's next section to learn how to generate several schemata -->
            <inputSchema>public</inputSchema>
        </database>

        <generate>
            <!-- <daos>true</daos>-->
            <relations>true</relations>
            <!-- Generation flags: See advanced configuration properties -->
        </generate>

        <target>
            <!-- The destination package of your generated classes (within the
                 destination directory) -->
            <packageName>ge.economy.law.model</packageName>

            <!-- The destination directory of your generated classes -->
            <directory>../</directory>
        </target>
    </generator>
</configuration>